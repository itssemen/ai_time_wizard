import json
import random





# Дополнительные глаголы и контексты для разнообразия
ADDITIONAL_ACTIONS_CONTEXTS = {
    "глаголы_общего_назначения": [
        "проверить", "подготовить", "организовать", "обновить", "завершить", "начать", "продолжить",
        "изучить", "проанализировать", "создать", "настроить", "протестировать", "задокументировать",
        "обсудить", "согласовать", "пересмотреть", "оптимизировать", "исправить", "найти", "выбрать",
        "загрузить", "скачать", "установить", "удалить", "настроить", "сохранить", "отправить", "получить",
        "делегировать", "проконтролировать", "верифицировать", "ассессмент", "структурировать", "форматировать",
        "запустить", "остановить", "перезапустить", "мониторить", "собрать", "разобрать", "утвердить", "отклонить"
    ],
    "объекты_действий_разные": [
        "отчет", "презентацию", "документы", "код", "дизайн", "контент", "план", "бюджет", "список задач",
        "электронную почту", "календарь", "базу данных", "сервер", "приложение", "веб-сайт", "систему",
        "конфигурацию", "материалы", "исследование", "аналитику", "метрики", "результаты", "ошибки",
        "билеты", "бронь", "заказ", "посылку", "доставку", "ремонт", "уборку", "покупки", "счета",
        "требования", "спецификации", "макеты", "прототипы", "тест-кейсы", "пользовательские истории",
        "коммерческое предложение", "контракт", "резюме", "вакансию", "скрипт продаж", "маркетинговую кампанию",
        "стратегию", "дорожную карту продукта", "модель данных", "архитектуру системы", "токены доступа", "сертификаты"
    ],
    "контексты_места_инструменты": [
        "в Jira", "в Confluence", "в Trello", "в Asana", "в Figma", "в Photoshop", "в VS Code", "в Excel",
        "в Google Docs", "на GitHub", "в CRM", "в ERP", "по электронной почте", "в Slack", "в Zoom", "в Miro", "в Notion",
        "на совещании", "на встрече с клиентом", "для проекта X", "по задаче Y", "в рамках спринта Z", "в бэклоге",
        "на компьютере", "на ноутбуке", "на телефоне", "в офисе", "дома", "в коворкинге", "в дороге", "в облаке",
        "с использованием Python", "через API", "в командной строке", "в Docker контейнере", "на тестовом стенде", "на продакшене"
    ]
}

TASK_CATEGORIES = {
    "короткие_коммуникации": {
        "actions": [
            "позвонить {кому}", "написать сообщение {кому} по {вопросу_коммуникации}", "ответить на письмо {от кого}",
            "скинуть файл {кому}", "уточнить детали по {чему}", "согласовать {что} с {кем}",
            "проверить почту", "быстро ответить {кому}", "написать {кому} короткое письмо",
            "переслать информацию {кому} от {кого}", "запросить фидбек у {кого} по {чему}", "уведомить {кого} о {событии_уведомления}",
            "быстрый синк с {кем_коллега}", "чекнуть апдейты по {проекту_планерки}", "написать краткий саммари по {теме_отчета} для {кого}"
        ],
        "duration_range": (5, 20),
        "keywords_for_duration": {"позвонить": (5,15), "написать": (5,15), "проверить почту": (5,10), "согласовать": (10,20), "запросить фидбек": (5,15), "уведомить": (5,10), "синк": (10,20), "чекнуть апдейты": (5,10), "саммари": (10,20), "быстро ответить": (5,10), "уточнить": (5,15)}
    },
    "быт_еда": {
        "actions": [
            "приготовить {что_еда}", "заказать {что_еда_заказ}", "помыть посуду", "загрузить стирку",
            "развесить белье", "полить цветы", "вынести мусор", "сходить в магазин за {чем_покупки}",
            "купить продукты", "прибраться на кухне", "протереть стол", "приготовить кофе/чай", "покормить {кого_питомец}",
            "приготовить перекус", "заварить чай", "заварить кофе"
        ],
        "duration_range": (5, 60),
        "keywords_for_duration": {"приготовить": (20,60), "сходить в магазин": (15,45), "заказать": (5,10), "кофе/чай": (5,10), "покормить": (5,10), "перекус": (5,15), "заварить чай": (5,5), "заварить кофе": (5,10), "помыть посуду": (10,25), "загрузить стирку": (5,10)}
    },
    "уборка_организация": {
        "actions": [
            "сделать уборку в {где_дом}", "пропылесосить {где_дом}", "вытереть пыль", "разобрать {что_разбор}",
            "навести порядок на столе", "организовать файлы на {носителе_информации}", "рассортировать документы",
            "помыть пол в {где_дом}", "почистить {что_чистка}", "выбросить {что_выбросить}", "протереть зеркала", "убрать в холодильнике"
        ],
        "duration_range": (10, 120),
        "keywords_for_duration": {"сделать уборку": (30,120), "разобрать": (20,90), "организовать файлы": (15,60), "выбросить": (5,15), "пропылесосить": (15,45), "вытереть пыль": (10,30), "помыть пол": (20,60)}
    },
    "работа_проекты": {
        "actions": [
            "поработать над проектом {каким_проект}", "написать код для {чего_программирование}", "отладить {что_программирование}",
            "подготовить отчет по {теме_отчета}", "составить план {чего_планирование}", "провести исследование {темы_исследования}",
            "проанализировать данные {какие_данные}", "написать статью о {чем_статья}", "решить рабочую задачу {какую_задачу}",
            "провести ревью кода {чьего_кода}", "обновить документацию по {системе}", "подготовить презентацию {тема_презентации}",
            "протестировать функционал {какой_функционал}", "деплой {чего_деплой}", "настроить {что_настройка_рабочее}", "создать тикет в {системе_тикетов}",
            "декомпозировать задачу {какую_задачу}", "оценить трудозатраты по {чему_планирование}", "подготовить агенду для {тема_совещания}", "зафиксировать договоренности после {тема_совещания}"
        ],
        "duration_range": (20, 240),
        "keywords_for_duration": {"отчет": (45,180), "исследование": (60,240), "код": (30,180), "презентац": (45,180), "тестировать": (30,120), "деплой": (15,60), "тикет": (5,15), "декомпозиров": (20,90), "оценить трудозатраты": (15,60), "агенду": (10,30), "зафиксировать договоренности": (10,20), "ревью кода": (30,90), "документац": (30,120)}
    },
    "встречи_созвоны": {
        "actions": [
            "провести встречу с {кем_встреча}", "созвониться с {кем_встреча} по {вопросу_созвона}", "участвовать в совещании {тема_совещания}",
            "обсудить {что_обсуждение} с командой", "планерка по {проекту_планерки}", "стендап", "daily митинг",
            "провести one-on-one с {кем}", "синхронизироваться с {кем_коллега} по {вопросу_синхронизации}", "провести демо для {кого_демо}"
        ],
        "duration_range": (10, 90),
        "keywords_for_duration": {"совещание": (30,90), "планерка": (15,45), "one-on-one": (30,60), "синхронизироваться": (10,30), "демо": (30,60), "стендап": (10,20), "daily митинг": (10,25)}
    },
    "обучение_развитие": {
        "actions": [
            "изучить {что_изучение}", "пройти онлайн-курс по {теме_курса}", "посмотреть вебинар о {чем_вебинар}",
            "почитать профессиональную литературу {какую_книгу}", "сделать упражнения по {предмету_упражнения}", "выучить новые слова на {языке_изучения}",
            "попрактиковаться в {навыке}", "посмотреть лекцию по {теме_лекции}", "прочитать статью на {ресурсе_статей} по {теме_статьи_проф}", "пройти модуль {название_модуля}"
        ],
        "duration_range": (20, 180),
        "keywords_for_duration": {"изучить": (30,120), "курс": (45,180), "лекцию": (30,90), "статью": (15,60), "модуль": (30,90), "посмотреть вебинар": (45,120), "пройти урок": (30,90), "почитать проф. литературу": (30,120)}
    },
    "личные_дела_поручения": {
        "actions": [
            "записаться к {специалисту}", "оплатить {что_счета}", "сходить в {место_посещения}", "забрать {что_забрать} из {откуда_забрать}",
            "починить {что_ремонт}", "купить билеты на {событие}", "подать документы в {организацию}", "поздравить {кого} с {праздником}",
            "отвезти {что_отвезти} в {место_назначения}", "посетить {мероприятие_личного_характера}", "забронировать {что_бронь}", "продлить {что_продление}",
            "проверить {что_проверить_личное}"
        ],
        "duration_range": (5, 90),
        "keywords_for_duration": {"записаться": (5,20), "оплатить счета": (5,30), "подать документы": (20,60), "забронировать": (5,25), "продлить": (10,40), "проверить": (5,15), "сходить в": (30,90)}
    },
    "отдых_хобби": {
        "actions": [
            "почитать книгу {какую_книгу_отдых}", "посмотреть фильм {какой_фильм}", "послушать {что_музыка}", "поиграть в {какую_игру}",
            "заняться хобби ({каким_хобби})", "погулять {где_прогулка}", "помедитировать", "поспать {сколько_сон} часов", "отдохнуть немного",
            "порисовать {что_рисование}", "поиграть на {муз_инструменте}", "посмотреть серию {какого_сериала}", "полистать {что_соцсеть}"
        ],
        "duration_range": (15, 180),
        "keywords_for_duration": {"посмотреть фильм": (60,150), "погулять": (30,90), "поспать": (240,540), "почитать книгу": (30,120), "серию сериала": (30,60), "полистать соцсеть": (10,45)}
    },
    "спорт_здоровье": {
        "actions": [
            "сделать зарядку", "пойти на тренировку в {место_тренировки}", "пробежка на {дистанцию_бег}", "заняться йогой",
            "посетить врача {специалист_врач}", "принять лекарства", "сделать упражнения для {части_тела}", "поплавать в бассейне",
            "сходить на массаж", "прогуляться на свежем воздухе"
        ],
        "duration_range": (10, 120),
        "keywords_for_duration": {"тренировка": (30,75), "пробежка": (20,60), "врача": (30,60), "массаж": (45,75), "прогуляться на свежем воздухе": (15,45), "сделать зарядку": (10,20), "заняться йогой": (30,75)}
    },
    "творчество_создание": {
        "actions": [
            "написать {что_текст}", "сочинить {что_музыкальное}", "сделать {что_рукоделие} своими руками",
            "записать видео о {теме_видео}", "разработать дизайн для {чего_дизайн}", "придумать идею для {проекта_идея}",
            "смонтировать ролик {о_чем_ролик}", "написать пост для {платформы_поста}"
        ],
        "duration_range": (30, 240),
        "keywords_for_duration": {"написать текст": (45,180), "дизайн": (60,240), "видео": (90,300), "смонтировать ролик": (60,180), "написать пост": (20,75)}
    },
    "планирование_анализ_будущего": {
        "actions": [
            "спланировать {что_план_будущее}", "проанализировать {что_анализ_будущее}", "подумать над {вопросом_размышления}",
            "поставить цели на {период}", "обдумать стратегию {чего_стратегия}", "подвести итоги {чего_итоги}", "оценить риски по {чему_риски}"
        ],
        "duration_range": (15, 90),
        "keywords_for_duration": {"спланировать": (20,60), "проанализировать": (30,90), "подвести итоги": (15,45), "оценить риски": (20,60)}
    },
    "общие_задачи_с_новым_контекстом": {
        "actions": [
            "{глагол_общего_назначения} {объект_действия_разный}",
            "{глагол_общего_назначения} {объект_действия_разный} {контекст_места_инструмент}",
            "{глагол_общего_назначения} {объект_действия_разный} для {каким_проект}",
            "{глагол_общего_назначения} {объект_действия_разный} по {вопросу_коммуникации}",
            "быстро {глагол_общего_назначения} {объект_действия_разный}",
            "тщательно {глагол_общего_назначения} {объект_действия_разный}"
        ],
        "duration_range": (10, 120),
        "keywords_for_duration": {"проверить": (10,45), "подготовить": (20,90), "проанализировать": (30,120), "создать": (45,180), "тщательно": (0,0)}
    },
    "поездки_транспорт": {
        "actions": [
            "съездить в {место_поездки}", "доехать до {места_назначения_поездка}", "отвезти {кого_или_что_отвезти} в {место_назначения_поездка}",
            "забрать {кого_или_что_забрать_поездка} из {откуда_забрать_поездка}", "поездка по делам в {район_города}",
            "съездить на {транспорте} в {место_поездки_с_транспортом}"
        ],
        "duration_range": (15, 120),
        "keywords_for_duration": {"съездить": (20,90), "доехать": (15,75), "отвезти": (20,75), "забрать": (20,75)}
    },
    "финансы_бюджет": {
        "actions": [
            "проверить баланс {чего_баланс}", "оплатить {что_счета_финансы}", "перевести деньги {кому_перевод} за {за_что_перевод}",
            "составить бюджет на {период_бюджет}", "проанализировать расходы за {период_расходы}", "пополнить {что_пополнить}"
        ],
        "duration_range": (5, 60),
        "keywords_for_duration": {"проверить баланс": (5,10), "оплатить": (5,20), "перевести деньги": (5,15), "составить бюджет": (20,60), "проанализировать расходы": (15,45)}
    },
    "ежедневные_ритуалы": {
        "actions": [
            "утренний кофе/чай", "просмотреть новости {какие_новости}", "быстрая проверка почты", "составить список дел на день",
            "вечерний обзор дня", "подготовить одежду на завтра", "зарядить {что_зарядить_техника}", "принять витамины",
            "короткая медитация", "проверить уведомления в {мессенджере}"
        ],
        "duration_range": (5, 20),
        "keywords_for_duration": {"кофе/чай": (5,10), "новости": (5,20), "почты": (5,15), "список дел": (5,20), "одежду": (5,10), "зарядить": (5,5), "витамины": (5,5), "медитация": (5,15), "уведомления": (5,10)}
    },
    "еженедельное_планирование_и_обзоры": {
        "actions": [
            "спланировать неделю", "подвести итоги недели", "обновить еженедельный отчет для {кого}",
            "просмотреть задачи на следующую неделю", "разобрать загрузки за неделю", "очистить рабочий стол (физический/виртуальный) в конце недели",
            "проверить еженедельные метрики по {проекту_планерки}"
        ],
        "duration_range": (15, 90),
        "keywords_for_duration": {"спланировать неделю": (30,75), "итоги недели": (15,45), "отчет": (30,90), "очистить стол": (10,30)}
    },
    "самообслуживание_и_здоровье_рутина": {
        "actions": [
            "принять душ", "почистить зубы", "умыться", "причесаться", "нанести крем {какой_крем}",
            "выпить стакан воды", "проверить уровень {чего_проверить_здоровье}", "заказать линзы/очки",
            "проверить аптечку"
        ],
        "duration_range": (5, 30),
        "keywords_for_duration": {"душ": (10,20), "зубы": (5,5), "крем": (5,5), "воды": (5,5), "аптечку": (5,15)}
    }
}

# Заполнители для действий
PLACEHOLDERS = {
    "кому": ["маме", "другу", "коллеге", "начальнику", "клиенту", "подруге", "брату", "партнеру", "поставщику", "HR", "бухгалтеру", "аналитику", "разработчику", "менеджеру проекта", "дизайнеру"],
    "от кого": ["банка", "партнера", "руководства", "клиента", "коллеги", "друга", "отдела маркетинга", "технической поддержки", "заказчика", "пользователя"],
    "что": ["этот вопрос", "детали проекта", "план работ", "условия договора", "презентацию", "ужин", "отчет", "концепцию", "макет", "прототип", "спецификацию", "требования", "коммерческое предложение", "техническое задание"],
    "чем_покупки": ["хлебом", "молоком", "овощами", "фруктами", "необходимым", "бытовой химией", "канцтоварами", "кофе", "чаем", "вкусняшками к чаю", "лекарствами", "журналами"],
    "где_дом": ["комнате", "квартире", "на кухне", "в гостиной", "в ванной", "на балконе", "в кабинете", "в спальне", "в кладовке", "в гараже", "на чердаке"],
    "каким_проект": ["новым", "интересным", "сложным", "важным", "текущим", "личным", "рабочим", "благотворительным", "исследовательским"],
    "чего_программирование": ["новой фичи", "багфикса", "модуля", "скрипта", "интеграции", "API", "тестов", "оптимизации"],
    "что_программирование": ["программу", "скрипт", "алгоритм", "функцию", "класс", "веб-сервис", "мобильное приложение"],
    "теме_отчета": ["продаж", "нового продукта", "анализа конкурентов", "квартального отчета", "маркетинговой кампании", "эффективности рекламы", "посещаемости сайта", "финансовым результатам"],
    "чего_планирование": ["следующей недели", "маркетинговой кампании", "разработки фичи", "отпуска", "бюджета", "релиза", "переезда", "свадьбы"],
    "темы_исследования": ["рынка", "пользовательского поведения", "новых технологий", "эффективности процесса", "конкурентной среды", "целевой аудитории"],
    "какие_данные": ["финансовые", "статистические", "пользовательские", "операционные", "маркетинговые", "исторические", "прогнозные"],
    "чем_статья": ["искусственном интеллекте", "путешествиях", "здоровом питании", "новой технологии", "продуктивности", "финансах", "психологии"],
    "какую_задачу": ["сложную", "срочную", "аналитическую", "техническую", "креативную", "рутинную", "исследовательскую"],
    "кем_встреча": ["командой", "клиентом", "руководителем", "партнерами", "кандидатом", "инвестором", "подрядчиком"],
    "вопросу_созвона": ["сотрудничества", "поставки", "текущих задач", "обновлений", "фидбека", "стратегии", "проблем", "идей"],
    "тема_совещания": ["по итогам квартала", "по новому проекту", "о стратегии развития", "по проблемам в отделе", "мозговой штурм", "ретроспектива спринта"],
    "что_обсуждение": ["результаты спринта", "планы на следующий месяц", "возникшие проблемы", "новые идеи", "риски проекта", "требования заказчика"],
    "проекту_планерки": ["Alpha", "Omega", "развития платформы", "запуска продукта", "мобильного приложения", "веб-портала"],
    "что_изучение": ["новый фреймворк", "иностранный язык", "технику быстрого чтения", "основы дизайна", "методологию Agile", "язык программирования Go", "работу с Docker"],
    "теме_курса": ["Python-разработки", "маркетинга в соцсетях", "управления проектами", "финансовой грамотности", "машинного обучения", "анализа данных", "публичных выступлений"],
    "чем_вебинар": ["трендах в IT", "личной эффективности", "инвестициях", "копирайтинге", "нейросетях", "кибербезопасности"],
    "какую_книгу": ["по специальности", "художественную", "научно-популярную", "биографию", "по психологии", "по истории"],
    "предмету_упражнения": ["английскому языку", "программированию", "математике", "физике", "химии", "логике"],
    "языке_изучения": ["английском", "немецком", "испанском", "китайском", "французском", "японском", "итальянском"],
    "специалисту": ["врачу", "стоматологу", "парикмахеру", "юристу", "бухгалтеру", "психологу", "косметологу", "тренеру"],
    "что_счета": ["коммунальные услуги", "интернет", "мобильную связь", "кредит", "налоги", "штрафы", "подписки"],
    "место_посещения": ["банк", "почту", "химчистку", "спортзал", "бассейн", "МФЦ", "музей", "театр", "выставку", "библиотеку"],
    "что_забрать": ["посылку", "документы", "заказ", "одежду из химчистки", "ребенка из школы", "вещи из ремонта"],
    "откуда_забрать": ["ремонта", "прачечной", "пункта выдачи", "работы", "школы", "садика", "с почты", "у друга"],
    "что_ремонт": ["кран", "велосипед", "компьютер", "полку", "машину", "телефон", "одежду"],
    "событие": ["концерт", "спектакль", "футбольный матч", "самолет", "поезд", "вечеринку", "семинар", "конференцию"],
    "организацию": ["налоговую", "университет", "визовый центр", "банк", "страховую компанию", "госуслуги"],
    "праздником": ["днем рождения", "юбилеем", "Новым Годом", "профессиональным праздником", "годовщиной", "8 марта", "23 февраля"],
    "какую_книгу_отдых": ["детектив", "фантастику", "классику", "любовный роман", "триллер", "комиксы", "фэнтези"],
    "какой_фильм": ["новый", "документальный", "любимый", "комедию", "драму", "боевик", "мультфильм", "сериал"],
    "что_музыка": ["любимую музыку", "подкаст", "аудиокнигу", "новый альбом", "классическую музыку", "радио"],
    "какую_игру": ["компьютерную игру", "настолку", "шахматы", "головоломку", "карточную игру", "видеоигру на консоли"],
    "каким_хобби": ["вязанием", "моделированием", "фотографией", "садоводством", "кулинарией", "рисованием", "танцами", "коллекционированием"],
    "где_прогулка": ["в парке", "в лесу", "по городу", "вдоль набережной", "за городом", "в горах", "по пляжу"],
    "сколько_сон": ["7", "8", "немного", "час", "полтора", "6", "9"],
    "место_тренировки": ["спортзал", "стадион", "парк", "дом", "бассейн", "на улице", "фитнес-клуб"],
    "дистанцию_бег": ["5 км", "короткую дистанцию", "обычную дистанцию", "10 км", "интервальную", "марафонскую", "полумарафон"],
    "специалист_врач": ["терапевту", "окулисту", "кардиологу", "неврологу", "дерматологу", "ЛОРу", "эндокринологу"],
    "вопросу_коммуникации": ["проекту", "договору", "встрече", "отчету", "доставке", "оплате", "качеству", "срокам"],
    "что_еда": ["завтрак", "обед", "ужин", "пирог", "салат", "суп", "бутерброды", "десерт", "кашу"],
    "что_еда_заказ": ["пиццу", "суши", "готовую еду из ресторана", "продукты на дом", "бургеры", "пасту"],
    "что_разбор": ["вещи в шкафу", "старые бумаги", "фотографии", "инструменты", "книги", "игрушки", "электронику"],
    "носителе_информации": ["компьютере", "внешнем диске", "облаке", "флешке", "NAS", "сервере"],
    "что_чистка": ["раковину", "плиту", "микроволновку", "ковер", "окна", "духовку", "холодильник"],
    "чьего_кода": ["коллеги", "джуниора", "своего старого", "фрилансера", "команды разработки"],
    "системе": ["CRM", "базе данных", "API", "внутреннему порталу", "ERP-системе", "системе логирования", "платежной системе"],
    "тема_презентации": ["для клиента", "для команды", "по результатам проекта", "о новом продукте", "для инвесторов", "на конференции"],
    "навыке": ["слепой печати", "публичных выступлений", "быстрого счета", "рисования", "переговоров", "тайм-менеджмента"],
    "теме_лекции": ["истории искусств", "квантовой физике", "нейросетям", "экономике", "политологии", "философии"],
    "что_отвезти": ["документы", "подарок", "вещи", "заказ", "детей в школу", "кота к ветеринару"],
    "место_назначения": ["офис", "другу", "на дачу", "в сервис", "на почту", "в аэропорт"],
    "мероприятие_личного_характера": ["выставку", "родительское собрание", "встречу выпускников", "свадьбу друга", "день рождения родственника"],
    "что_рисование": ["пейзаж", "натюрморт", "портрет", "абстракцию", "эскиз", "иллюстрацию"],
    "муз_инструменте": ["гитаре", "пианино", "скрипке", "барабанах", "флейте", "саксофоне"],
    "части_тела": ["спины", "пресса", "ног", "рук", "плеч", "шеи"],
    "что_текст": ["статью для блога", "рассказ", "стихотворение", "пост для соцсетей", "сценарий", "рекламный текст", "письмо"],
    "что_музыкальное": ["песню", "мелодию", "аранжировку", "бит", "саундтрек"],
    "что_рукоделие": ["шарф", "игрушку", "картину", "украшение", "мыло", "свечу", "одежду"],
    "теме_видео": ["обзоре продукта", "путешествии", "обучающем материале", "интервью", "влоге"],
    "чего_дизайн": ["сайта", "логотипа", "интерьера", "приложения", "рекламного баннера", "упаковки", "персонажа"],
    "проекта_идея": ["стартапа", "нового продукта", "улучшения процесса", "творческого проекта", "социальной инициативы", "мобильного приложения"],
    "что_план_будущее": ["карьеру", "путешествие", "покупку", "обучение", "ремонт", "инвестиции"],
    "что_анализ_будущее": ["свои финансы", "прошлые ошибки", "возможности для роста", "риски", "тенденции рынка", "конкурентов"],
    "вопросом_размышления": ["смысле жизни", "будущем", "принятии решения", "своих целях", "новых возможностях", "проблеме выбора"],
    "период": ["неделю", "месяц", "квартал", "год", "пятилетку", "ближайшие пару дней", "следующий год"],
    "чего_стратегия": ["развития бизнеса", "личного бренда", "инвестирования", "достижения цели", "продвижения продукта", "обучения"],
    # Добавляем плейсхолдеры для новой категории
    "глагол_общего_назначения": ADDITIONAL_ACTIONS_CONTEXTS["глаголы_общего_назначения"],
    "объект_действия_разный": ADDITIONAL_ACTIONS_CONTEXTS["объекты_действий_разные"],
    "контекст_места_инструмент": ADDITIONAL_ACTIONS_CONTEXTS["контексты_места_инструменты"],

    # Плейсхолдеры для новых категорий и действий
    "событии_уведомления": ["завершении этапа", "изменении статуса", "предстоящем событии", "важном обновлении", "проблеме", "возможности"],
    "кого_питомец": ["кота", "собаку", "рыбок", "попугая", "хомяка"],
    "что_выбросить": ["старые вещи", "ненужные бумаги", "просроченные продукты", "сломанную технику", "мусор из корзины"],
    "какой_функционал": ["оплаты", "регистрации", "поиска", "нового модуля", "отчетности", "интеграции"],
    "чего_деплой": ["новой версии приложения", "хотфикса", "обновления на сервер", "микросервиса", "сайта"],
    "что_настройка_рабочее": ["конфигурацию сервера", "пайплайн CI/CD", "мониторинг", "базу данных", "окружение разработки"],
    "системе_тикетов": ["Jira", "YouTrack", "Redmine", "ServiceDesk", "Trello", "Asana"],
    "кем_коллега": ["Иваном", "Марией", "коллегой из смежного отдела", "тимлидом", "product owner'ом"],
    "вопросу_синхронизации": ["текущим задачам", "блокировкам", "планам на день", "зависимостям", "общему прогрессу"],
    "кого_демо": ["клиента", "команды", "стейкхолдеров", "руководства", "потенциальных пользователей"],
    "ресурсе_статей": ["Хабре", "Medium", "VC.ru", "корпоративном блоге", "отраслевом журнале", "TechCrunch"],
    "теме_статьи_проф": ["новым технологиям", "управлению проектами", "маркетингу", "анализу данных", "разработке ПО", "дизайну"],
    "название_модуля": ["по безопасности", "по базам данных", "введения в ИИ", "по работе с API", "продвинутого уровня"],
    "что_бронь": ["отель", "столик в ресторане", "авиабилеты", "билеты в театр", "время на прием"],
    "что_продление": ["подписку", "абонемент в спортзал", "доменное имя", "договор аренды", "лицензию на ПО"],
    "какого_сериала": ["любимого", "нового", "этого дурацкого", "который посоветовали", "документального"],
    "что_соцсеть": ["ленту новостей", "сообщения", "истории друзей", "профили коллег", "группы по интересам"],
    "о_чем_ролик": ["путешествии", "распаковке", "обучающем материале", "игровом процессе", "обзоре"],
    "платформы_поста": ["Instagram", "Facebook", "Telegram-канала", "блога на сайте", "LinkedIn", "Twitter"],
    "чего_итоги": ["недели", "месяца", "проекта", "встречи", "проделанной работы", "эксперимента"],
    "чему_риски": ["новому проекту", "инвестициям", "запуску продукта", "изменению стратегии", "внедрению технологии"],
    "место_поездки": ["центр города", "другой район", "за город", "на дачу", "к родителям", "в аэропорт", "на вокзал", "в магазин IKEA"],
    "места_назначения_поездка": ["офиса", "дома", "встречи", "пункта назначения", "работы", "указанного адреса"],
    "кого_или_что_отвезти": ["детей в школу", "документы партнерам", "посылку на почту", "друга на вокзал", "заказ клиенту"],
    "кого_или_что_забрать_поездка": ["детей из садика", "заказ из пункта выдачи", "вещи из химчистки", "друга с аэропорта", "документы из офиса"],
    "район_города": ["соседний район", "деловой центр", "промышленную зону", "спальный район", "исторический центр"],
    "транспорте": ["метро", "автобусе", "такси", "личном автомобиле", "электричке", "велосипеде"],
    "место_поездки_с_транспортом": ["работу", "парк", "музей", "торговый центр", "другой город (недалеко)"],
    "чего_баланс": ["банковской карты", "мобильного телефона", "инвестиционного счета", "электронного кошелька", "подарочной карты"],
    "что_счета_финансы": ["кредит", "ипотеку", "штрафы ГИБДД", "подписку на сервис", "обучение ребенка", "аренду квартиры"],
    "кому_перевод": ["другу", "родственнику", "подрядчику", "благотворительному фонду", "на свой другой счет"],
    "за_что_перевод": ["возврат долга", "подарок на день рождения", "оплату услуг", "помощь", "совместную покупку"],
    "период_бюджет": ["месяц", "неделю", "квартал", "отпуск", "ремонт"],
    "период_расходы": ["прошлый месяц", "последнюю неделю", "год", "командировку", "отпуск"],
    "что_пополнить": ["транспортную карту", "счет мобильного телефона", "брокерский счет", "электронный кошелек", "депозит в банке"],


    "какие_новости": ["отраслевые", "мировые", "технологические", "финансовые", "спортивные", "местные"],
    "что_зарядить_техника": ["телефон", "ноутбук", "планшет", "наушники", "умные часы", "фотоаппарат"],
    "мессенджере": ["Telegram", "WhatsApp", "Slack", "Discord", "Skype", "корпоративном чате"],
    "какой_крем": ["для рук", "для лица", "увлажняющий", "солнцезащитный", "питательный"],
    "чего_проверить_здоровье": ["сахара в крови", "давления", "пульса", "температуры", "веса", "качества сна"],


    "что_проверить_личное": ["почтовый ящик (физический)", "счетчики воды/электричества", "срок годности продуктов", "наличие лекарств", "задолженности по штрафам"]
}


HIGH_PRIORITY_KEYWORDS = [
    "срочно", "важно", "немедленно", "в первую очередь", "обязательно", "критично", "дедлайн", "горит",
    "кровь из носу", "экстренно", "безотлагательно", "крайний срок", "must have", "top priority", "первоочередно",
    "требует немедленного внимания", "сделать сегодня", "заблокировано до выполнения"
]
LOW_PRIORITY_KEYWORDS = [
    "если будет время", "потом", "не горит", "можно отложить", "второстепенно", "когда-нибудь", "не к спеху",
    "по возможности", "опционально", "позже", "nice to have", "low priority", "в свободное время",
    "если останутся силы", "можно сделать на следующей неделе", "не критично"
]

# Дополнительные ключевые слова для длительности, специфичные для категорий
TASK_CATEGORIES["короткие_коммуникации"]["keywords_for_duration"].update({
    "быстро ответить": (2, 10), "уточнить": (5, 15)
})
TASK_CATEGORIES["работа_проекты"]["keywords_for_duration"].update({
    "написать код": (60, 300), "отладить": (30, 180), "ревью кода": (30, 90), "документац": (45, 180)
})
TASK_CATEGORIES["встречи_созвоны"]["keywords_for_duration"].update({
    "стендап": (10,20), "daily митинг": (10,25)
})
TASK_CATEGORIES["обучение_развитие"]["keywords_for_duration"].update({
    "посмотреть вебинар": (45, 120), "пройти урок": (30, 90)
})


def get_realistic_duration(action_text_template, action_text_concrete):
    action_text_lower = action_text_concrete.lower()
    base_duration = 0


    for category_name, cat_data in TASK_CATEGORIES.items():
        if action_text_template in cat_data["actions"]:
            found_keyword_duration = False
            for keyword, (dur_min, dur_max) in cat_data.get("keywords_for_duration", {}).items():
                if keyword.lower() in action_text_lower:

                    base_duration = random.randint(dur_min // 5, dur_max // 5) * 5
                    found_keyword_duration = True
                    break
            if found_keyword_duration:
                break

            cat_min, cat_max = cat_data["duration_range"]

            base_duration = random.randint(cat_min // 5, cat_max // 5) * 5
            break

    if base_duration == 0:

        base_duration = random.choice([20, 30, 40, 60])



    if base_duration <= 0:
        return 0

    base_duration = max(5, (base_duration + 2) // 5 * 5)
    return base_duration


def determine_priority(action_text_template, action_text_concrete, explicit_priority_phrase=None):
    action_text_concrete_lower = action_text_concrete.lower()



    if explicit_priority_phrase:
        phrase_lower = explicit_priority_phrase.lower()
        if any(k in phrase_lower for k in HIGH_PRIORITY_KEYWORDS):
            return "high"
        if any(k in phrase_lower for k in LOW_PRIORITY_KEYWORDS):
            return "low"


    if any(k in action_text_concrete_lower for k in HIGH_PRIORITY_KEYWORDS):
        return "high"
    if any(k in action_text_concrete_lower for k in LOW_PRIORITY_KEYWORDS):
        return "low"


    category_name = None
    for cat_name, cat_data in TASK_CATEGORIES.items():
        if action_text_template in cat_data["actions"]:
            category_name = cat_name
            break

    if category_name:
        if category_name in ["работа_проекты", "встречи_созвоны"]:

            if random.random() < 0.4: return "high"
            if random.random() < 0.7: return "medium"

        elif category_name in ["личные_дела_поручения", "спорт_здоровье", "творчество_создание", "планирование_анализ_будущего"]:

            if random.random() < 0.2: return "high"
            if random.random() < 0.6: return "medium"
            return "low"
        elif category_name in ["отдых_хобби", "быт_еда", "уборка_организация"]:

            if random.random() < 0.1: return "high"
            if random.random() < 0.5: return "medium"
            return "low"
        elif category_name == "короткие_коммуникации":
            if any(kw in action_text_concrete_lower for kw in ["согласовать", "уточнить детали"]):
                return random.choice(["medium", "high"])
            return random.choice(["low", "medium"])
        elif category_name == "общие_задачи_с_новым_контекстом":

            if any(kw in action_text_concrete_lower for kw in ["отчет", "презентац", "документ", "дедлайн", "срочная задача", "проект", "клиент", "утвердить", "верифицировать"]):
                return random.choice(["medium", "high"])
            if any(kw in action_text_concrete_lower for kw in ["тщательно", "детально"]):
                return random.choice(["medium", "high"])
            return random.choice(["low", "medium", "medium"])
        elif category_name == "поездки_транспорт":

            if any(kw in action_text_concrete_lower for kw in ["срочно", "важно", "к врачу", "на встречу"]):
                return "high"
            return random.choice(["low", "medium", "medium"])
        elif category_name == "финансы_бюджет":
            if any(kw in action_text_concrete_lower for kw in ["бюджет", "расходы", "оплатить", "перевести"]):
                return random.choice(["medium", "high"])
            return random.choice(["low", "medium"])



    high_priority_general_keywords = [
        "отчет", "презентац", "документ", "дедлайн", "срочная задача", "клиент", "договор", "баг", "исправить ошибку",
        "проблема", "инцидент", "уязвимость", "заблокировано", "критический", "утвердить", "согласовать", "фикс", "релиз"
    ]
    low_priority_general_keywords = [
        "посмотреть фильм", "почитать книгу", "погулять", "отдохнуть", "хобби", "поиграть", "развлечение",
        "если будет время", "подумать над", "изучить (если не срочно)", "опционально", "второстепенно", "можно отложить"
    ]

    if any(k in action_text_concrete_lower for k in high_priority_general_keywords):
        return "high"
    if any(k in action_text_concrete_lower for k in low_priority_general_keywords):
        return "low"


    return "medium"


def generate_task_item():
    # Выбираем категорию с учетом весов для увеличения доли повседневных задач
    everyday_categories = [
        "ежедневные_ритуалы", "еженедельное_планирование_и_обзоры",
        "самообслуживание_и_здоровье_рутина", "короткие_коммуникации",
        "быт_еда", "финансы_бюджет"
    ]

    all_categories = list(TASK_CATEGORIES.keys())
    weights = [3 if cat_name in everyday_categories else 1 for cat_name in all_categories]

    chosen_category_name = random.choices(all_categories, weights=weights, k=1)[0]
    chosen_category = TASK_CATEGORIES[chosen_category_name]
    action_template = random.choice(chosen_category["actions"])

    # Заполняем плейсхолдеры в шаблоне действия
    action_text_concrete = action_template
    # Ищем все плейсхолдеры вида {key}
    placeholders_in_template = [ph[1:-1] for ph in action_template.split() if ph.startswith("{") and ph.endswith("}")]

    filled_placeholders = {}
    for ph_key in placeholders_in_template:
        if ph_key in PLACEHOLDERS:
            chosen_value = random.choice(PLACEHOLDERS[ph_key])
            action_text_concrete = action_text_concrete.replace("{" + ph_key + "}", chosen_value, 1)
            filled_placeholders[ph_key] = chosen_value

    # Временные указания и соответствующие минуты, КРАТНЫЕ 5.
    # Значения скорректированы для большей реалистичности.
    time_options = [
        ("часик", 60), ("пару часов", 120), ("полчаса", 30), ("часа полтора", 90), ("полтора часа", 90),
        ("два часа", 120), ("три часа", 180), ("четыре часа", 240), # Убраны 5 и 6 часов как слишком специфичные для общих фраз
        ("минут 5", 5), ("минут 10", 10), ("минут 15", 15), ("минут 20", 20), ("минут 25", 25),
        ("минут 30", 30), ("минут 40", 40), ("минут 45", 45), ("минут 50", 50), ("минут 55", 55),
        ("минут 75", 75), ("минут 90", 90),
        ("1 час", 60), ("2 часа", 120), ("3 часа", 180), ("4 часа", 240),
        ("1.5 часа", 90), ("2.5 часа", 150), ("0.5 часа", 30), ("3.5 часа", 210),
        ("1ч", 60), ("2ч", 120), ("1ч30м", 90), ("45м", 45), ("90 мин", 90), ("15 мин", 15),
        ("120 минут", 120), ("180 минут", 180),
        ("на полчасика", 30),
        ("на часок-другой", random.choice([60, 90, 120, 150])),
        ("на пару-тройку часов", random.choice([120, 150, 180, 210])),
        ("немного времени на", random.choice([10, 15, 20, 25, 30])), # Более короткие "немного"
        ("посвятить этому где-то", random.choice([30, 45, 60, 75, 90, 120])),
        ("займет примерно", random.choice([15, 20, 25, 30, 45, 60, 75, 90])),
        ("буквально {N} минут", None), # N будет 5, 10, 15, 20, 25
        ("около {N} часов", None),    # N будет 1, 1.5, 2, 2.5, 3
        ("примерно {N} мин.", None),  # N будет кратно 5 до 60
        ("где-то {N} ч.", None),      # N будет 0.5, 1, 1.5, 2
        ("", None) # Вариант без явного указания времени
    ]
    




    duration_phrase = ""
    actual_duration_minutes = 0
    has_explicit_duration_phrase = False

    if random.random() < 0.80:
        duration_phrase_template, duration_minutes_from_phrase = random.choice(time_options)


        if "{N}" in duration_phrase_template:
            if "минут" in duration_phrase_template or "мин." in duration_phrase_template:
                n_val = random.choice([5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60])
                actual_duration_minutes = n_val
                duration_phrase = duration_phrase_template.format(N=n_val)
                has_explicit_duration_phrase = True
            elif "часов" in duration_phrase_template or "ч." in duration_phrase_template:
                n_val = random.choice([0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4])
                actual_duration_minutes = int(n_val * 60)
                duration_phrase = duration_phrase_template.format(N=str(n_val).replace('.5', ',5'))
                has_explicit_duration_phrase = True
            else:
                actual_duration_minutes = get_realistic_duration(action_template, action_text_concrete)
                duration_phrase = ""

        elif duration_minutes_from_phrase is None:
            actual_duration_minutes = get_realistic_duration(action_template, action_text_concrete)
            duration_phrase = ""

        else:
            actual_duration_minutes = duration_minutes_from_phrase
            duration_phrase = duration_phrase_template
            if duration_phrase.strip():
                has_explicit_duration_phrase = True



            if duration_phrase_template in ["часик", "пару часов", "на часок-другой", "на пару-тройку часов"]:


                 variance_minutes = random.randint(-15, 15) // 5 * 5
                 actual_duration_minutes = actual_duration_minutes + variance_minutes
                 actual_duration_minutes = max(5, actual_duration_minutes // 5 * 5)
    else:
        duration_phrase = ""
        actual_duration_minutes = get_realistic_duration(action_template, action_text_concrete)



    has_explicit_duration_phrase = bool(duration_phrase.strip())


    explicit_duration_parsed_minutes = parse_duration_phrase_to_minutes(duration_phrase)



    if actual_duration_minutes == 0 and explicit_duration_parsed_minutes > 0:
        actual_duration_minutes = explicit_duration_parsed_minutes








    if actual_duration_minutes <= 0:
        actual_duration_minutes = 0
    else:
        actual_duration_minutes = max(5, (actual_duration_minutes + 2) // 5 * 5)


    priority_phrases = ["", "это очень важно", "нужно сделать срочно", "это не горит", "можно сделать потом",
                        "обязательно выполни", "критически важно", "если останется время", "первостепенно",
                        "не к спеху", "сделай как можно скорее", "постарайся успеть", "второстепенная задача",
                        "это прям горит", "подождет до завтра", "это приоритетно", "сделай это в первую очередь",
                        "не забудь, это важно", "можно не спешить с этим", "пока не трогай", "отложи на потом"]


    explicit_priority_phrase = ""
    if random.random() < 0.6:
        explicit_priority_phrase = random.choice(priority_phrases)

    priority = determine_priority(action_template, action_text_concrete, explicit_priority_phrase)


    if not action_text_concrete.strip():
        action_text_concrete = "какое-то дело"

    return action_text_concrete, duration_phrase, actual_duration_minutes, priority, explicit_priority_phrase, has_explicit_duration_phrase, explicit_duration_parsed_minutes


def parse_duration_phrase_to_minutes(phrase_text):
    """
    Tries to parse a duration phrase (e.g., "2 часа", "30 минут", "1ч30м") into minutes.
    Returns minutes as int, or 0 if parsing fails or phrase is vague.
    """



    if not phrase_text or not isinstance(phrase_text, str):

        return 0

    text = phrase_text.lower().strip()
    import re

    if not text:

        return 0


    match_1 = re.fullmatch(r'(\d+(?:[.,]\d+)?)\s*ч\s*(\d+)\s*м', text)
    if match_1:
        try:
            h = float(match_1.group(1).replace(',', '.'))
            m = int(match_1.group(2))
            return int(h * 60) + m
        except ValueError: return 0


    match_2 = re.fullmatch(r'(\d+(?:[.,]\d+)?)\s*(?:час(?:а|ов)?|ч\.?)\s+(\d+)\s*(?:мин(?:ут|уты|ы)?|м\.?)', text)
    if match_2:
        try:
            h = float(match_2.group(1).replace(',', '.'))
            m = int(match_2.group(2))
            return int(h * 60) + m
        except ValueError: return 0


    match_3a = re.fullmatch(r'(\d+(?:[.,]\d+)?)\s*(?:час(?:а|ов)?|ч\.?)', text)
    if match_3a:
        try:
            h = float(match_3a.group(1).replace(',', '.'))
            return int(h * 60)
        except ValueError: return 0


    match_3b = re.fullmatch(r'(?:час(?:а|ов)?|ч\.?)\s*(\d+(?:[.,]\d+)?)', text)
    if match_3b:
        try:
            h = float(match_3b.group(1).replace(',', '.'))
            return int(h * 60)
        except ValueError: return 0


    match_4a = re.fullmatch(r'(\d+)\s*(?:мин(?:ут|уты|ы)?|м\.?)', text)
    if match_4a:
        try:
            m = int(match_4a.group(1))
            return m
        except ValueError: return 0


    match_4b = re.fullmatch(r'(?:мин(?:ут|уты|ы)?|м\.?)\s*(\d+)', text)
    if match_4b:
        try:
            m = int(match_4b.group(1))
            return m
        except ValueError: return 0


    if text == "полчаса": return 30
    if text == "полтора часа": return 90
    if text == "час": return 60



    return 0


def generate_freeform_sentence():
    starters = [
        "Сегодня мне нужно", "Мой план на день:", "Надо не забыть", "Запланировал себе",
        "Вот что я должен сделать:", "Задачи на сегодня:", "Хочу успеть", "Собираюсь сделать",
        "Мои дела:", "Планы:", "Необходимо выполнить:", "Список дел:", "Так, поехали:",
        "На повестке дня:", "Сегодня в программе:", "Первым делом,",
        "Итак, что у нас тут:", "Нужно быстренько:", "Сфокусируюсь на:" # Новые стартеры
    ]
    




    sentence_templates = [
        "{action} {duration_phrase} {priority_phrase}",
        "{action} {priority_phrase} {duration_phrase}",
        "{priority_phrase}, {action} {duration_phrase}",
        "{action} {duration_phrase}",
        "{action} {priority_phrase}",
        "{action}",
        "{duration_phrase} на {action} {priority_phrase}",
        "{duration_phrase} хочу потратить на {action}",
        "Займусь {action} {duration_phrase}",
        "Нужно {action}", "Надо бы {action}",
        "Обязательно {action} {duration_phrase}",
        "Не забыть: {action}",
        "Потом можно {action}",
        "Если успею, то {action} {duration_phrase}",
        "В планах также {action}",
        "Кстати, еще {action} {priority_phrase}",
        "И {action} {duration_phrase} {priority_phrase}.",
        "Не забыть бы про {action}.",
        "Еще одна вещь: {action} {priority_phrase}",
        "Также {action} {duration_phrase}",
        "Надо {action}, {priority_phrase}, займет {duration_phrase}"
    ]
    
    full_text = random.choice(starters) + " "
    num_tasks = random.randint(1, 7)
    entities = []
    current_pos = len(full_text)

    for i in range(num_tasks):
        action_text_concrete, duration_ph, duration_min, task_priority, priority_ph, has_expl_dur_ph, expl_dur_parsed_min = generate_task_item()
        

        template = random.choice(sentence_templates)
        

        format_args = {
            "action": action_text_concrete,
            "duration_phrase": duration_ph.strip(),
            "priority_phrase": priority_ph.strip()
        }
        


        current_task_full_phrase = template.format(**format_args)
        current_task_full_phrase = ' '.join(filter(None, current_task_full_phrase.split(' ')))
        current_task_full_phrase = current_task_full_phrase.replace(" ,", ",").replace(" .", ".")

        
        full_text += current_task_full_phrase



        action_start_in_segment = -1












        search_text_lower = full_text[current_pos:].lower()
        action_to_find_lower = action_text_concrete.lower()

        action_start_in_segment = search_text_lower.find(action_to_find_lower)

        if action_start_in_segment != -1:
            action_start_global = current_pos + action_start_in_segment
            action_end_global = action_start_global + len(action_text_concrete)


            valid_entity = True
            for prev_entity in entities:
                if max(prev_entity['start'], action_start_global) < min(prev_entity['end'], action_end_global):
                    valid_entity = False

                    break

            if valid_entity:
                entities.append({
                    "text": action_text_concrete,
                    "start": action_start_global,
                    "end": action_end_global,
                    "label": "TASK",
                    "priority": task_priority,
                    "duration_minutes": duration_min,
                    "duration_phrase_original": duration_ph,
                    "has_explicit_duration_phrase": has_expl_dur_ph,
                    "explicit_duration_parsed_minutes": expl_dur_parsed_min
                })

        current_pos += len(current_task_full_phrase)


        if i < num_tasks - 1:

            if random.random() < 0.2 and not full_text.strip().endswith((".", "!", "?", ";", ",")):
                full_text += random.choice([". ", "! ", "? "])
                current_pos += 2



                if random.random() < 0.5:
                     current_task_full_phrase = current_task_full_phrase[0].upper() + current_task_full_phrase[1:]

            sep = random.choice([", ", "; ", ". Потом ", ". А еще ", " и ", ". Затем ", ". После этого ",
                                 ", также ", ", кроме того ", ". Далее, ", " плюс к этому "])
            full_text += sep
            current_pos += len(sep)
        else:

            if not full_text.strip().endswith((".", "!", "?")):
                 full_text += random.choice([".", "!"])
                 current_pos += 1
            elif full_text.strip().endswith((",", ";")):
                full_text = full_text.strip()[:-1] + random.choice([".", "!"])



    full_text = ' '.join(full_text.split())
    full_text = full_text.replace(" .", ".").replace(" ,", ",").replace(" !", "!").replace(" ?", "?")
    full_text = full_text.replace(" ;", ";")


    return {
        "text": full_text,
        "entities": entities
    }


NUM_EXAMPLES = 100
dataset = []
generated_count = 0

attempt_limit = NUM_EXAMPLES * 5

while generated_count < NUM_EXAMPLES and attempt_limit > 0:
    example = generate_freeform_sentence()





    has_explicit_duration_task = any(e.get('has_explicit_duration_phrase', False) for e in example["entities"])





    priorities_in_example = {e['priority'] for e in example["entities"] if 'priority' in e}
    has_varied_priorities = False
    if priorities_in_example:

        has_varied_priorities = len(priorities_in_example) > 1 or \
                                ("medium" not in priorities_in_example and len(priorities_in_example) > 0)


    if example["entities"] and len(example["text"]) > 10 and has_explicit_duration_task and has_varied_priorities:
        dataset.append(example)
        generated_count += 1
    elif example["entities"] and len(example["text"]) > 10 and random.random() < 0.3:
        dataset.append(example)
        generated_count += 1

    attempt_limit -=1

if generated_count < NUM_EXAMPLES:
    if attempt_limit <= 0:
        print(f"Предупреждение: Достигнут лимит попыток генерации. Сгенерировано {generated_count} из {NUM_EXAMPLES} примеров.")
    else:
        print(f"Предупреждение: Сгенерировано только {generated_count} из {NUM_EXAMPLES} запрошенных примеров (несмотря на оставшиеся попытки).")
elif generated_count == 0 and NUM_EXAMPLES > 0 :
     print(f"ОШИБКА: Не сгенерировано ни одного примера. Проверьте условия отбора в цикле генерации.")



output_file_path = 'ml/freeform_task_dataset.json'
with open(output_file_path, 'w', encoding='utf-8') as f:
    json.dump(dataset, f, ensure_ascii=False, indent=2)

print(f"Создан датасет ({len(dataset)} примеров) и сохранен в '{output_file_path}'.")


if dataset:
    print("\nПример сгенерированного элемента:")
    print(json.dumps(dataset[0], ensure_ascii=False, indent=2))
else:
    print("\nНе удалось сгенерировать ни одного элемента для датасета.")
